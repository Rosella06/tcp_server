import * as net from 'net';
import { resolve } from 'path';
// import getStatusTs from "./constants"

function plcServer() {
    let server: net.Server | null = null;
    let client: net.Socket | null = null;

    function getStatusT(status: string, qty?: string): string {
        console.log("Received Status Code:", status);
        switch (status) {
    
            case '01': return '‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå'; 
            case '02': return '‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'; 
            case '03': return `Checksum ‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Sxx)`; 
            case '04': return '‡∏Ñ‡∏≤‡∏£‡πå‡∏ó‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô‡πÅ‡∏Å‡∏ô‡∏ô‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á';
            case '05': return '‡∏Ñ‡∏≤‡∏£‡πå‡∏ó‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô‡πÅ‡∏Å‡∏ô‡∏ï‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á';
            case '06': return '‡∏Å‡∏•‡πÑ‡∏Å‡∏´‡∏¢‡∏¥‡∏ö‡∏Ç‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á';
            case '07': return '‡∏Ñ‡∏≤‡∏£‡πå‡∏ó‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô‡πÅ‡∏Å‡∏ô‡∏ô‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏•';
            case '08': return '‡∏Ñ‡∏≤‡∏£‡πå‡∏ó‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô‡πÅ‡∏Å‡∏ô‡∏ï‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏•';
            case '91': return '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß';
            case '92': return `‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÑ‡∏î‡πâ‡πÉ‡∏ô Q${qty}`;
            default: return 'T00';
        }
    }

    function startPlcServer({ port }: { port: number }) {

        server = net.createServer((socket) => {
            client = socket;

            console.log('üì° PLC Connected:', socket.remoteAddress, socket.remotePort);

            socket.on('data', (data) => {
                console.log('üì• Received from PLC:', data.toString());
                const status = data.toString().split("T", 2)[1]?.substring(0, 2) || "00";
                const response = getStatusT(status);
                console.log('Status:', response);
                // socket.write(response);
            });

            socket.on('close', () => {
                console.log('‚ùå PLC Disconnected');
                client = null;
            });

            socket.on('error', (err) => {
                console.log('‚ö†Ô∏è Socket Error:', err.message);
            });
        });

        server.listen(port, () => {
            console.log(`üöÄ PLC Server started on port : ${port}`);
        });

        server.on('error', (err) => {
            console.log('‚ö†Ô∏è Server Error:', err.message);
        });
    }

    function  sendToPLC(data: string) {
        if (!client) {
            console.log('‚ö†Ô∏è No PLC Connected');
            return;
        }
        console.log('üì§ Sending to PLC:', data);
        client.write(data);

        return client;
    }

    return {
        startPlcServer,
        sendToPLC
    };
}

export type PlcServer = ReturnType<typeof plcServer>;
export { plcServer };